Analytics.tsx:

import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, Typography, Divider, Grid, Box } from '@mui/material';
import { getAnalytics } from '../services/api';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Analytics: React.FC = () => {
  const [analytics, setAnalytics] = useState<any>({});

  useEffect(() => {
    const fetchAnalytics = async () => {
      const response = await getAnalytics();
      setAnalytics(response.data);
    };
    fetchAnalytics();
  }, []);

  const averageDuration = analytics.averageDuration
    ? analytics.averageDuration.toFixed(2)
    : 'N/A';

  const data = {
    labels: ['People Currently in Building', 'Average Duration of Stay', 'Peak Entry Time', 'Peak Exit Time', 'Most Used Entry Gate', 'Most Used Exit Gate'],
    datasets: [
      {
        label: 'Analytics Data',
        data: [
          analytics.currentPeopleCount,
          averageDuration,
          analytics.peakEntryTime,
          analytics.peakExitTime,
          analytics.mostUsedEntryGate,
          analytics.mostUsedExitGate,
        ],
        backgroundColor: [
          '#ff6384',
          '#36a2eb',
          '#cc65fe',
          '#ffce56',
          '#4bc0c0',
          '#f779b8',
        ],
        borderColor: '#fff',
        borderWidth: 2,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: 'Building Entry Analytics',
      },
    },
  };

  return (
    <Card variant="outlined" sx={{ height: '100%', backgroundColor: '#fafafa', borderRadius: 3, boxShadow: 3 }}>
      <CardHeader title="Analytics" sx={{ backgroundColor: '#673ab7', color: '#fff', textAlign: 'center' }} />
      <Divider />
      <CardContent>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#e3f2fd', borderRadius: 2, boxShadow: 1 }}>
              <Typography variant="body2" color="textSecondary">
                People Currently in Building
              </Typography>
              <Typography variant="h6" color="primary">
                {analytics.currentPeopleCount}
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} md={6}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#e3f2fd', borderRadius: 2, boxShadow: 1 }}>
              <Typography variant="body2" color="textSecondary">
                Average Duration of Stay
              </Typography>
              <Typography variant="h6" color="primary">
                {averageDuration} minutes
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} md={6}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#e3f2fd', borderRadius: 2, boxShadow: 1 }}>
              <Typography variant="body2" color="textSecondary">
                Peak Entry Time
              </Typography>
              <Typography variant="h6" color="primary">
                {analytics.peakEntryTime}:00
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} md={6}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#e3f2fd', borderRadius: 2, boxShadow: 1 }}>
              <Typography variant="body2" color="textSecondary">
                Peak Exit Time
              </Typography>
              <Typography variant="h6" color="primary">
                {analytics.peakExitTime}:00
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} md={6}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#e3f2fd', borderRadius: 2, boxShadow: 1 }}>
              <Typography variant="body2" color="textSecondary">
                Most Frequently Used Entry Gate
              </Typography>
              <Typography variant="h6" color="primary">
                {analytics.mostUsedEntryGate}
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} md={6}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#e3f2fd', borderRadius: 2, boxShadow: 1 }}>
              <Typography variant="body2" color="textSecondary">
                Most Frequently Used Exit Gate
              </Typography>
              <Typography variant="h6" color="primary">
                {analytics.mostUsedExitGate}
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12}>
            <Box sx={{ padding: 2, textAlign: 'center', backgroundColor: '#ffffff', borderRadius: 2, boxShadow: 1 }}>
              <Bar data={data} options={options} />
            </Box>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );
};

export default Analytics;



























EntryEnitForm.tsx:


import React, { useState } from 'react';
import { Box, TextField, Button, Typography } from '@mui/material';
import { registerEntry, registerExit } from '../services/api';

const EntryExitForm: React.FC = () => {
  const [name, setName] = useState('');
  const [gate, setGate] = useState(''); // Add state for gate
  const [error, setError] = useState('');

  const handleEntry = async () => {
    setError('');
    try {
      await registerEntry(name, gate); // Pass name and gate
      alert('Entry registered successfully');
    } catch (err) {
      setError('Failed to register entry');
    }
  };

  const handleExit = async () => {
    setError('');
    try {
      await registerExit(name, gate); // Pass name and gate
      alert('Exit registered successfully');
    } catch (err) {
      setError('Failed to register exit');
    }
  };

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        Register Entry/Exit
      </Typography>
      <TextField
        label="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
        required
        sx={{ marginBottom: 2 }}
      />
      <TextField
        label="Gate" // Add field for gate
        value={gate}
        onChange={(e) => setGate(e.target.value)}
        required
        sx={{ marginBottom: 2 }}
      />
      <Box sx={{ display: 'flex', gap: 2, marginTop: 2 }}>
        <Button variant="contained" onClick={handleEntry}>
          Register Entry
        </Button>
        <Button variant="contained" onClick={handleExit}>
          Register Exit
        </Button>
      </Box>
      {error && <Typography color="error">{error}</Typography>}
    </Box>
  );
};

export default EntryExitForm;

















History.tsx:


import React, { useState } from 'react';
import { TextField, Button, Box, Typography, List, ListItem, Card, CardContent, CardHeader, Divider } from '@mui/material';
import { getHistory } from '../services/api';

const History: React.FC = () => {
  const [personId, setPersonId] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [history, setHistory] = useState<any[]>([]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const response = await getHistory(personId, startDate, endDate);
      setHistory(response.data);
    } catch (error) {
      console.error('Error fetching history:', error);
    }
  };

  return (
    <Card variant="outlined" sx={{ backgroundColor: '#fafafa', borderRadius: 3, boxShadow: 3 }}>
      <CardHeader title="History" sx={{ backgroundColor: '#673ab7', color: '#fff', textAlign: 'center' }} />
      <Divider />
      <CardContent>
        <Box component="form" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 2, alignItems: 'center' }}>
          <TextField
            label="Person ID"
            value={personId}
            onChange={(e) => setPersonId(e.target.value)}
            required
            sx={{ width: '100%', maxWidth: 400 }}
          />
          <TextField
            type="date"
            label="Start Date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            required
            InputLabelProps={{ shrink: true }}
            sx={{ width: '100%', maxWidth: 400 }}
          />
          <TextField
            type="date"
            label="End Date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            required
            InputLabelProps={{ shrink: true }}
            sx={{ width: '100%', maxWidth: 400 }}
          />
          <Button
            variant="contained"
            type="submit"
            sx={{ backgroundColor: '#4caf50', color: '#fff', '&:hover': { backgroundColor: '#388e3c' } }}
          >
            Submit
          </Button>
        </Box>
        <Divider sx={{ margin: '20px 0' }} />
        <List sx={{ width: '100%', maxWidth: 600, margin: '0 auto', backgroundColor: '#f5f5f5', borderRadius: 2, boxShadow: 1 }}>
          {history.length > 0 ? (
            history.map((event: any) => (
              <ListItem key={event._id} sx={{ borderBottom: '1px solid #ddd', padding: '10px 20px' }}>
                <Typography variant="body2" color="textSecondary">
                  {`${event.personId} - ${event.gate} - ${new Date(event.timestamp).toLocaleString()} - ${event.type}`}
                </Typography>
              </ListItem>
            ))
          ) : (
            <Typography variant="body2" color="textSecondary" sx={{ textAlign: 'center', marginTop: 2 }}>
              No history found
            </Typography>
          )}
        </List>
      </CardContent>
    </Card>
  );
};

export default History;



























PeopleList.tsx:


import React, { useEffect, useState } from 'react';
import { Typography, CircularProgress, Box, List, ListItem, Paper } from '@mui/material';
import { getPeople } from '../services/api';

const PeopleList: React.FC = () => {
  const [people, setPeople] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPeople = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await getPeople();
        setPeople(response.data);
      } catch (error) {
        setError('Error fetching people');
      } finally {
        setLoading(false);
      }
    };

    fetchPeople();
  }, []);

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        People Currently Inside
      </Typography>
      {loading && <CircularProgress />}
      {error && <Typography color="error">{error}</Typography>}
      <Paper sx={{ maxHeight: 250, overflow: 'auto', padding: 2, backgroundColor: '#f5f5f5', borderRadius: 2, boxShadow: 1 }}>
        <List>
          {people.length > 0 ? (
            people.slice(0, 7).map((person, index) => (
              <ListItem key={index} divider>
                {person}
              </ListItem>
            ))
          ) : (
            <Typography>No people inside</Typography>
          )}
          {people.length > 7 && (
            <Box sx={{ height: '150px', overflowY: 'auto' }}>
              <List>
                {people.slice(7).map((person, index) => (
                  <ListItem key={index + 7} divider>
                    {person}
                  </ListItem>
                ))}
              </List>
            </Box>
          )}
        </List>
      </Paper>
    </Box>
  );
};

export default PeopleList;